(define car
    (lambda ((car . cdr))
        car ))

(define cdr
    (lambda ((car . cdr))
        cdr ))

(define list
    (lambda x x) )

(define map
    (lambda (fn lst)
        (if (null? lst)
            ()
            (cons (fn (car lst)) (map fn (cdr lst))) )))

(define filter
    (lambda (fn lst)
        (if (null? lst)
            ()
            (if (fn (car lst))
                (cons (car lst) (filter fn (cdr lst)))
                (filter fn (cdr lst)) ))))

(define reduce
    (lambda (fn init lst)
        (if (null? lst)
            init
            (fn (car lst) (reduce fn init (cdr lst))) )))

(define append
    (lambda (lst-1 lst-2)
        (reduce cons lst-2 lst-1) ))
